<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lecture 3 on Documentation for Hugo Learn Theme</title>
    <link>/lecture3/</link>
    <description>Recent content in Lecture 3 on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 07 Aug 2022 21:51:11 +0900</lastBuildDate><atom:link href="/lecture3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture 3</title>
      <link>/lecture3/content1/</link>
      <pubDate>Sat, 08 Oct 2022 20:09:49 +0900</pubDate>
      
      <guid>/lecture3/content1/</guid>
      <description>Java 클래스의 Defining과 Instantiating static vs non-static 코드의 complexity를 관리하기 primitive type과 reference type, 매개 변수 전달 object instantiation 클래스에는 다양한 instance method, variable들이 존재합니다. 따라서, object의 생성 시, 이 member들을 초기화해주는 작업이 필요하며, 이를 object instantiation이라고 부릅니다.
object instantiation을 하는 여러 방법이 있지만, 클래스 내부에서 constructor를 만들어줌으로 이를 수행할 수 있습니다.
public class Dog { public int weightInPounds; /** One integer constructor for dogs. */ public Dog(int w) { weightInPounds = w; } public void makeNoise() { if (weightInPounds &amp;lt; 10) { System.</description>
    </item>
    
  </channel>
</rss>
