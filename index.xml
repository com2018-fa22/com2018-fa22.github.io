<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation for Hugo Learn Theme</title>
    <link>/</link>
    <description>Recent content on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 09 Oct 2022 09:54:50 +0900</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture 6</title>
      <link>/lecture6/content1/</link>
      <pubDate>Sun, 09 Oct 2022 09:54:50 +0900</pubDate>
      
      <guid>/lecture6/content1/</guid>
      <description>앞선 SLList의 단점들을 하나씩 개선해 봅시다.
size() 개선 기존 IntNode에서는 전체 List의 크기를 알아내기 위해 모든 List를 순회해야 했습니다. 이와 달리, SLList에서는 전체 List의 길이를 보관하는 별도의 member variable을 만듭니다. 이는 SLList의 초기 생성 시에는 1이 될 것이며, Node를 추가할 때마다 1씩 증가하게 됩니다. public class SLList { private IntNode first; private int size; public SLList() { first = null; size = 0; } public void addFirst(int x) { .</description>
    </item>
    
    <item>
      <title>Lecture 5</title>
      <link>/lecture5/content1/</link>
      <pubDate>Sun, 09 Oct 2022 09:54:38 +0900</pubDate>
      
      <guid>/lecture5/content1/</guid>
      <description>지난 시간, primitive type과 reference type에 대해서 배워보았습니다.
이번에는 이들이 method의 매개변수로 전달되는 과정을 살펴봅시다.
아래 코드에서, walrus와 x중 어떠한 값이 변경되고 유지될까요?
PollQuestions.java 실행결과 public class PollQuestions { public static void main(String[] args) { Walrus walrus = new Walrus(3500, 10.5); int x = 9; doStuff(walrus, x); System.out.println(walrus); System.out.println(x); } public static void doStuff(Walrus W, int x) { W.weight = W.weight - 100; x = x - 5; } ... weight: 3400, tusk size: 10.</description>
    </item>
    
    <item>
      <title>Lecture 4</title>
      <link>/lecture4/content1/</link>
      <pubDate>Sat, 08 Oct 2022 20:09:52 +0900</pubDate>
      
      <guid>/lecture4/content1/</guid>
      <description>Lecture 4: Testing
A Simple JUnit test Testing Philosophy Selection Sort Simpler JUnit Tests 내가 작성하는 모든 코드가 완벽하리라 보장할 수는 없을 것입니다. 이를 위해 다양한 test 코드를 만들고 이를 통해 잘못된 로직을 수정하는 방식을 사용하여 코드의 안정성을 높일 수 있습니다.
Selection Sort 구현 String array가 주어졌을 때, 알파벳 순으로 정렬된 array를 반환하는 sort 코드를 작성해봅시다.
예를 들어, {”i”, “am”, ”a”, “student”}라는 array는 {”a”, “am”, “i”, “student”}가 될 것입니다. sort method를 구현하기 전, 테스트 코드를 작성해봅시다.</description>
    </item>
    
    <item>
      <title>Lecture 3</title>
      <link>/lecture3/content1/</link>
      <pubDate>Sat, 08 Oct 2022 20:09:49 +0900</pubDate>
      
      <guid>/lecture3/content1/</guid>
      <description>Java 클래스의 Defining과 Instantiating static vs non-static 코드의 complexity를 관리하기 primitive type과 reference type, 매개 변수 전달 object instantiation 클래스에는 다양한 instance method, variable들이 존재합니다. 따라서, object의 생성 시, 이 member들을 초기화해주는 작업이 필요하며, 이를 object instantiation이라고 부릅니다.
object instantiation을 하는 여러 방법이 있지만, 클래스 내부에서 constructor를 만들어줌으로 이를 수행할 수 있습니다.
public class Dog { public int weightInPounds; /** One integer constructor for dogs. */ public Dog(int w) { weightInPounds = w; } public void makeNoise() { if (weightInPounds &amp;lt; 10) { System.</description>
    </item>
    
    <item>
      <title>Classes and Objects, Static, Types</title>
      <link>/lecture2/content1/</link>
      <pubDate>Wed, 05 Oct 2022 21:12:07 +0900</pubDate>
      
      <guid>/lecture2/content1/</guid>
      <description>이번 노트에서는 다음과 같은 내용을 다룹니다.
자바의 메소드 (Method) 자바 프로그램이 실행되기까지 (컴파일러, JVM) Class와 object static과 non-static (가벼운 차이만 다룹니다.) Methods in Java Classes 파이썬에서 두 변수의 크기를 비교하는 함수를 작성해보면 아래와 같습니다.
def larger(a, b): return a &amp;gt; b print(larger(3, 2)) print(larger(1, 2)) print(larger(&amp;#34;google&amp;#34;, &amp;#34;apple&amp;#34;)) print(larger(&amp;#34;han&amp;#34;, &amp;#34;yang&amp;#34;)) # 결과 True False True False 만약 서로 자료형을 가진 두 변수를 전달하게 되면, 아래와 같은 오류가 발생합니다.
두 input 매개변수의 자료형이 다르면 크기 비교를 할 수 없기 때문입니다.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>/lecture1/hello_world/</link>
      <pubDate>Fri, 30 Sep 2022 16:42:08 +0900</pubDate>
      
      <guid>/lecture1/hello_world/</guid>
      <description>다양한 언어에서 Hello World를 콘솔 출력해봅시다.
Python print(&amp;#34;Hello World&amp;#34;) C #include &amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;#34;Hello World!\n&amp;#34;); return 0; } Python과 C의 차이점은 무엇일까요? 많은 차이가 있지만, 큰 맥락에서 이야기해봅시다.
파이썬은 코드를 한 줄씩 실행하는 인터프리터 언어인 반면, C는 기계어로의 변환이 필요한 컴파일 언어입니다.
따라서 컴파일러에게 코드의 시작을 알리기 위해 main이라는 함수를 두게 됩니다.
Java를 통해 Hello World를 출력하기 위해서는 다음과 같은 코드를 사용합니다.
public class Hello { public static void main(String[] args) { System.</description>
    </item>
    
  </channel>
</rss>
